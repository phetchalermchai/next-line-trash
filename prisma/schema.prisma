generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Complaint {
  id           String               @id @default(uuid())
  source       ComplaintSource      @default(LINE)
  receivedBy   String?
  reporterName String?
  lineUserId   String?
  phone        String?
  description  String
  imageBefore  String?
  imageAfter   String?
  location     String?
  zoneId       String?
  zoneName     String?
  status       ComplaintStatus      @default(PENDING)
  message      String?
  verifiedAt   DateTime? // วันเวลายืนยัน
  verifiedBy   String? // ใครกดยืนยัน (userId)
  autoVerified Boolean?             @default(false) // ถูกปิดงานอัตโนมัติหรือไม่
  reopenLogs   ComplaintReopenLog[] // ขอแก้ไข
  notifiedAt   DateTime?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

enum ComplaintStatus {
  PENDING
  DONE
  VERIFIED
  REJECTED
  CANCELLED // กรณีผู้ร้องเรียนของยกเลิก
  REOPENED // กรณีผู้ร้องขอให้แก้ไขงาน
}

enum ComplaintSource {
  LINE
  FACEBOOK
  PHONE
  COUNTER
  OTHER
}

model ComplaintReopenLog {
  id           String    @id @default(uuid())
  complaintId  String
  reason       String
  createdAt    DateTime  @default(now())
  reporterName String // ผู้ร้อง/ผู้ขอแก้ไข
  complaint    Complaint @relation(fields: [complaintId], references: [id])
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(ADMIN)
  status        UserStatus @default(PENDING)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  accounts Account[]
  sessions Session[] // ✅ สำหรับ NextAuth
  apiKeys  ApiKey[]
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String // ✅ เช่น 'oauth'
  provider          String // ✅ เช่น 'google'
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id        String    @id @default(uuid())
  key       String    @unique // เก็บค่า API Key ที่เข้ารหัสแล้ว (hash)
  userId    String
  name      String // ตั้งชื่อ key เช่น "สำหรับแอปมือถือ"
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

enum Role {
  SUPERADMIN
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  BANNED
}

model Setting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Zone {
  id              String   @id @default(uuid())
  name            String
  lineGroupId     String?
  telegramGroupId String?
  polygon         Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
