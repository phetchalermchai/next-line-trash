import axios from "axios";
import { getSettingByKey } from "@/lib/settings/service";
import { prisma } from "@/lib/prisma";
import { Complaint, ComplaintReopenLog } from "@prisma/client";

type ComplaintWithReopenLogs = Complaint & { reopenLogs: ComplaintReopenLog[] };

// messageTemplate ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏î‡πâ
function buildTelegramMessage(complaint: ComplaintWithReopenLogs, zoneName?: string, type: string = "‡πÉ‡∏´‡∏°‡πà", resultMessage?: string) {
    const date = type === "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
        ? complaint.updatedAt
        : complaint.createdAt;

    const thaiDate = new Date(date).toLocaleString("th-TH", {
        timeZone: "Asia/Bangkok",
        year: "numeric",
        month: "long",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        hour12: false
    });

    const statusLabel = {
        PENDING: "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        DONE: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
        VERIFIED: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß",
        REJECTED: "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
        CANCELLED: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
        REOPENED: "‡∏Ç‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
    };

    const sourceLabel = {
        LINE: "LINE",
        FACEBOOK: "Facebook",
        PHONE: "PHONE",
        COUNTER: "COUNTER",
        OTHER: "OTHER",
    };
    const mapUrl = complaint.location
        ? `https://www.google.com/maps/search/?api=1&query=${complaint.location}`
        : "https://www.google.com/maps";

    const detailUrl = `${process.env.WEB_BASE_URL}/complaints/${complaint.id}`;
    const reportUrl = `${process.env.WEB_BASE_URL}/admin/complaints/manage?reportId=${complaint.id}`;

    const lastReopenReason =
        complaint.status === "REOPENED" && complaint.reopenLogs?.length
            ? complaint.reopenLogs[complaint.reopenLogs.length - 1].reason
            : undefined;

    let txt = `
<b>‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (${type})</b>
<b>‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:</b> #${complaint.id.slice(-6).toUpperCase()}
<b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà${type === "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" ? "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" : "‡πÅ‡∏à‡πâ‡∏á"}:</b> ${thaiDate} ‡∏ô.
${zoneName ? `<b>‡πÇ‡∏ã‡∏ô:</b> ${zoneName}` : ""}

<b>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:</b> ${sourceLabel[complaint.source] || complaint.source}
<b>‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á:</b> ${complaint.reporterName || complaint.lineUserId || "-"}
${complaint.receivedBy && complaint.source !== "LINE" ? `<b>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á:</b> ${complaint.receivedBy}` : ""}
<b>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</b> ${complaint.phone || "-"}
<b>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b> ${complaint.description || "-"}
${resultMessage ? `\n<b>‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•:</b> ${resultMessage}` : ""}

<b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ${statusLabel[complaint.status] || complaint.status}
${lastReopenReason ? `<b>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:</b> ${lastReopenReason}` : ""}
<b>‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà:</b> <a href="${mapUrl}">‡πÄ‡∏õ‡∏¥‡∏î Google Maps</a>
  `.replace(/^ +/gm, '').trim();

    return {
        text: txt,
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "üåê ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", url: detailUrl },
                    ...(complaint.status === "PENDING" || complaint.status === "REOPENED"
                        ? [{ text: "üìù ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô", url: reportUrl }]
                        : [])
                ]
            ]
        }
    }
}

export async function notifyTelegramGroupForComplaint(complaint: ComplaintWithReopenLogs) {
    try {
        const groupHeaderMap: Record<string, string> = {
            PENDING: "‡πÉ‡∏´‡∏°‡πà",
            CANCELLED: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
            REJECTED: "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
            REOPENED: "‡∏Ç‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
        };
        // ‡∏´‡∏≤‡∏ß‡πà‡∏≤ zone ‡∏ó‡∏µ‡πà complaint ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
        let zone = null;
        if (complaint.zoneId) {
            zone = await prisma.zone.findUnique({ where: { id: complaint.zoneId } });
        }
        // ‡∏´‡∏≤ chat id ‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô zone ‚Üí ‡πÑ‡∏õ "‡πÇ‡∏ã‡∏ô‡∏Å‡∏•‡∏≤‡∏á")
        let chatId = zone?.telegramGroupId || null;
        let zoneName = zone?.name ?? undefined;

        if (!chatId) {
            // fallback: ‡∏´‡∏≤‡πÇ‡∏ã‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            const middleZone = await prisma.zone.findFirst({ where: { name: "‡πÇ‡∏ã‡∏ô‡∏Å‡∏•‡∏≤‡∏á" } });
            if (middleZone?.telegramGroupId) {
                chatId = middleZone.telegramGroupId;
                zoneName = middleZone.name;
            }
        }
        if (!chatId) return; // ‡πÑ‡∏°‡πà‡∏°‡∏µ chat id ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏•‡∏¢

        // ‡∏´‡∏≤ token
        let tokenSetting = await getSettingByKey("TELEGRAM_BOT_TOKEN");
        let telegramToken = tokenSetting?.value ?? process.env.TELEGRAM_BOT_TOKEN;
        if (!telegramToken) return;

        const message = buildTelegramMessage(complaint, zoneName, groupHeaderMap[complaint.status as string]);
        await axios.post(`https://api.telegram.org/bot${telegramToken}/sendMessage`, {
            chat_id: chatId,
            text: message.text,
            parse_mode: message.parse_mode,
            reply_markup: message.reply_markup,
        });
    } catch (error: any) {
        console.error(error?.response?.data || error);
        throw error;
    }
}


export async function notifyTelegramGroupReport(complaint: ComplaintWithReopenLogs, resultMessage: string) {
    let zone = null;
    if (complaint.zoneId) {
        zone = await prisma.zone.findUnique({ where: { id: complaint.zoneId } });
    }
    let chatId = zone?.telegramGroupId || null;
    let zoneName = zone?.name ?? undefined;

    if (!chatId) {
        const middleZone = await prisma.zone.findFirst({ where: { name: "‡πÇ‡∏ã‡∏ô‡∏Å‡∏•‡∏≤‡∏á" } });
        if (middleZone?.telegramGroupId) {
            chatId = middleZone.telegramGroupId;
            zoneName = middleZone.name;
        }
    }
    if (!chatId) return;

    let tokenSetting = await getSettingByKey("TELEGRAM_BOT_TOKEN");
    let telegramToken = tokenSetting?.value ?? process.env.TELEGRAM_BOT_TOKEN;
    if (!telegramToken) return;

    const telegramMsg = buildTelegramMessage(complaint, zoneName, "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", resultMessage);

    try {
        await axios.post(`https://api.telegram.org/bot${telegramToken}/sendMessage`, {
            chat_id: chatId,
            text: telegramMsg.text,
            parse_mode: telegramMsg.parse_mode,
            reply_markup: telegramMsg.reply_markup,
        });
    } catch (error) {
        console.error("[notifyTelegramGroupReport] ‡∏™‡πà‡∏á Telegram ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
    }
}

export async function notifyManualTelegramGroupReminder(complaint: ComplaintWithReopenLogs) {
    let zone = null;
    if (complaint.zoneId) {
        zone = await prisma.zone.findUnique({ where: { id: complaint.zoneId } });
    }
    let chatId = zone?.telegramGroupId || null;
    let zoneName = zone?.name ?? undefined;

    if (!chatId) {
        const middleZone = await prisma.zone.findFirst({ where: { name: "‡πÇ‡∏ã‡∏ô‡∏Å‡∏•‡∏≤‡∏á" } });
        if (middleZone?.telegramGroupId) {
            chatId = middleZone.telegramGroupId;
            zoneName = middleZone.name;
        }
    }
    if (!chatId) return;

    let tokenSetting = await getSettingByKey("TELEGRAM_BOT_TOKEN");
    let telegramToken = tokenSetting?.value ?? process.env.TELEGRAM_BOT_TOKEN;
    if (!telegramToken) return;

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏≠ (Pending) ‡πÅ‡∏•‡πâ‡∏ß
    const now = new Date();
    const created = new Date(complaint.createdAt);
    const diffCreatedDays = Math.floor((now.getTime() - created.getTime()) / (1000 * 60 * 60 * 24));
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏∏ "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏°‡∏≤ X ‡∏ß‡∏±‡∏ô"
    const telegramMsg = buildTelegramMessage(complaint, zoneName, `‡∏Ñ‡πâ‡∏≤‡∏á ${diffCreatedDays} ‡∏ß‡∏±‡∏ô`);

    try {
        await axios.post(`https://api.telegram.org/bot${telegramToken}/sendMessage`, {
            chat_id: chatId,
            text: telegramMsg.text,
            parse_mode: telegramMsg.parse_mode,
            reply_markup: telegramMsg.reply_markup,
        });
    } catch (error) {
        console.error("[notifyManualTelegramGroupReminder] ‡∏™‡πà‡∏á Telegram ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
    }
}