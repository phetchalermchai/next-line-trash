import axios from "axios";
import { getSettingByKey } from "@/lib/settings/service";
import { prisma } from "@/lib/prisma";
import { Complaint } from "@prisma/client";

// messageTemplate ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏î‡πâ
function buildTelegramMessage(complaint: Complaint, zoneName?: string, type: string = "‡πÉ‡∏´‡∏°‡πà") {
    const thaiDate = new Date(complaint.createdAt).toLocaleString("th-TH", {
        timeZone: "Asia/Bangkok",
        year: "numeric",
        month: "long",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        hour12: false
    });
    const statusLabel = {
        PENDING: "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        DONE: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
    };

    const sourceLabel = {
        LINE: "LINE",
        FACEBOOK: "Facebook",
        PHONE: "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
        COUNTER: "‡∏à‡∏∏‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
        OTHER: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    };
    const mapUrl = complaint.location
        ? `https://www.google.com/maps/search/?api=1&query=${complaint.location}`
        : "https://www.google.com/maps";

    const detailUrl = `${process.env.WEB_BASE_URL}/complaints/${complaint.id}`;
    const reportUrl = `${process.env.WEB_BASE_URL}/admin/complaints/manage?reportId=${complaint.id}`;

    let txt = `
üìå <b>‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (${type})</b>
<b>‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:</b> #${complaint.id.slice(-6).toUpperCase()}
<b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á:</b> ${thaiDate} ‡∏ô.
${zoneName ? `<b>‡πÇ‡∏ã‡∏ô:</b> ${zoneName}` : ""}

<b>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:</b> ${sourceLabel[complaint.source] || complaint.source}
<b>‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á:</b> ${complaint.reporterName || complaint.lineUserId || "-"}
${complaint.receivedBy && complaint.source !== "LINE" ? `<b>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á:</b> ${complaint.receivedBy}` : ""}
<b>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</b> ${complaint.phone || "-"}
<b>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b> ${complaint.description}

<b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ${statusLabel[complaint.status] || complaint.status}
<b>‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà:</b> <a href="${mapUrl}">‡πÄ‡∏õ‡∏¥‡∏î Google Maps</a>
  `.replace(/^ +/gm, '').trim();

    return {
        text: txt,
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "üåê ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", url: detailUrl },
                    { text: "üìù ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô", url: reportUrl }
                ]
            ]
        }
    }
}

export async function notifyTelegramGroupForComplaint(complaint: Complaint) {
    try {
        // ‡∏´‡∏≤‡∏ß‡πà‡∏≤ zone ‡∏ó‡∏µ‡πà complaint ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
        let zone = null;
        if (complaint.zoneId) {
            zone = await prisma.zone.findUnique({ where: { id: complaint.zoneId } });
        }
        // ‡∏´‡∏≤ chat id ‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô zone ‚Üí ‡πÑ‡∏õ "‡πÇ‡∏ã‡∏ô‡∏Å‡∏•‡∏≤‡∏á")
        let chatId = zone?.telegramGroupId || null;
        let zoneName = zone?.name ?? undefined;

        if (!chatId) {
            // fallback: ‡∏´‡∏≤‡πÇ‡∏ã‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            const middleZone = await prisma.zone.findFirst({ where: { name: "‡πÇ‡∏ã‡∏ô‡∏Å‡∏•‡∏≤‡∏á" } });
            if (middleZone?.telegramGroupId) {
                chatId = middleZone.telegramGroupId;
                zoneName = middleZone.name;
            }
        }
        if (!chatId) return; // ‡πÑ‡∏°‡πà‡∏°‡∏µ chat id ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏•‡∏¢

        // ‡∏´‡∏≤ token
        let tokenSetting = await getSettingByKey("TELEGRAM_BOT_TOKEN");
        let telegramToken = tokenSetting?.value ?? process.env.TELEGRAM_BOT_TOKEN;
        if (!telegramToken) return;

        const message = buildTelegramMessage(complaint, zoneName, "‡πÉ‡∏´‡∏°‡πà");
        await axios.post(`https://api.telegram.org/bot${telegramToken}/sendMessage`, {
            chat_id: chatId,
            text: message.text,
            parse_mode: message.parse_mode,
            reply_markup: message.reply_markup,
        });
    } catch (error:any) {
        console.error(error?.response?.data || error);
        throw error;
    }
}
