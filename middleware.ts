// middleware.ts
import { withAuth } from "next-auth/middleware";
import { NextResponse } from "next/server";

export default withAuth(
  function middleware(req) {
    const token = req.nextauth.token;
    const isAdminRoute = req.nextUrl.pathname.startsWith("/admin");

    if (!token) {
      return NextResponse.redirect(new URL("/login", req.url));
    }

    // ðŸ”’ à¸œà¸¹à¹‰à¹ƒà¸Šà¹‰à¸¢à¸±à¸‡à¹„à¸¡à¹ˆ approved â†’ à¹„à¸› /pending-approval
    if (token.status !== "APPROVED") {
      return NextResponse.redirect(new URL("/pending-approval", req.url));
    }

    // ðŸ”’ à¹€à¸‚à¹‰à¸²à¸«à¸™à¹‰à¸² /admin à¸•à¹‰à¸­à¸‡à¹€à¸›à¹‡à¸™ ADMIN à¸‚à¸¶à¹‰à¸™à¹„à¸›
    if (isAdminRoute && token.role !== "ADMIN" && token.role !== "SUPERADMIN") {
      return NextResponse.redirect(new URL("/unauthorized", req.url));
    }

    const superadminOnlyPaths = [
      "/admin/users/dashboard",
      "/admin/users/manage",
      "/admin/users/approved",
      "/admin/users/banned",
    ];

    if (superadminOnlyPaths.some((path) => req.nextUrl.pathname.startsWith(path))) {
      if (token.role !== "SUPERADMIN") {
        return NextResponse.redirect(new URL("/unauthorized", req.url));
      }
    }
  },
  {
    callbacks: {
      authorized: ({ token }) => !!token, // à¸•à¹‰à¸­à¸‡à¸¡à¸µ token
    },
  }
);

export const config = {
  matcher: ["/admin/:path*"],
};