// üìÅ app/link-account/callback/route.ts
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/prisma";

export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const provider = url.searchParams.get("provider");
  const linkingUserId = url.searchParams.get("linkingUserId");

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÑ‡∏´‡∏°
  if (!provider || !linkingUserId) {
    return NextResponse.redirect(
      new URL("/admin/settings/profile?error=missing-params", req.url)
    );
  }

  const session = await getServerSession(authOptions);

  if (!session?.user?.id) {
    return NextResponse.redirect(
      new URL("/admin/settings/profile?error=no-session", req.url)
    );
  }

  const sessionUserId = session.user.id;

  // ‚ùó ‡∏ñ‡πâ‡∏≤ session user ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ú‡∏π‡∏Å‡πÉ‡∏´‡πâ (‡πÄ‡∏ä‡πà‡∏ô login LINE ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏à‡∏≠ user Google ‡πÄ‡∏î‡∏¥‡∏°) ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ú‡∏π‡∏Å‡πÅ‡∏•‡πâ‡∏ß
  if (sessionUserId === linkingUserId) {
    return NextResponse.redirect(
      new URL("/admin/settings/profile?success=already-linked", req.url)
    );
  }

  // ‚úã ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö user ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ provider ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  const alreadyLinked = await prisma.account.findFirst({
    where: {
      provider,
      NOT: {
        userId: sessionUserId, // ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ provider ‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏£‡∏≤‡∏ó‡∏µ‡πà login
      },
    },
  });

  if (alreadyLinked) {
    return NextResponse.redirect(
      new URL("/admin/settings/profile?error=provider-already-linked", req.url)
    );
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ account ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á login ‡∏°‡∏≤‡∏ô‡∏µ‡πâ ‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
  const account = await prisma.account.findFirst({
    where: {
      provider,
      userId: sessionUserId,
    },
  });

  if (!account) {
    return NextResponse.redirect(
      new URL("/admin/settings/profile?error=account-not-found", req.url)
    );
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï account ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á user ‡πÄ‡∏î‡∏¥‡∏°
  await prisma.account.update({
    where: { id: account.id },
    data: { userId: linkingUserId },
  });

  return NextResponse.redirect(
    new URL("/admin/settings/profile?success=linked", req.url)
  );
}
